import os
import sys
import json
import random
from random import choice
from jinja2 import Environment, select_autoescape, FileSystemLoader


env = Environment(loader=FileSystemLoader('../MulVal_P/Template_P/'), autoescape=select_autoescape('P'))
template = env.get_template('topo_gen_node_temp.P')


def deJsonTop():
    des_list = []
    source_list = []
    server_list = []
    client_list = []

    with open('./topology-generator/top_info_1.json', 'r') as top_file:
        all_top_data = json.load(top_file)
        if all_top_data['connections']:
            for data in all_top_data['connections']:
                des_id = data['destination_id']
                source_id = data['source_id']
                des_list.append(des_id)
                source_list.append(source_id)

        if all_top_data['nodes']:
            for data in all_top_data['nodes']:
                node_type = data['node_type']
                node_id = data ['node_id']
                if node_type == 'server':
                    server_list.append(node_id)
                if node_type == 'client':
                    client_list.append(node_id)

    server_list = random.sample(server_list, len(server_list))
    client_list = random.sample(client_list, len(client_list))

    start = choice(server_list)
    end = choice(client_list)

    output_name = "MulVal_P/Template_P/topo_gen_temp.P"
    baiscFile = open('../' + output_name, 'w')
    basic_top = template.render(start=start, end=end, source_list0=source_list[0], source_list1=source_list[1],
                            source_list2=source_list[2], des_list0=des_list[0], des_list1=des_list[1], des_list2=des_list[2],
                            server_list0=server_list[0],
                            server_list1=server_list[1], client_list0=client_list[0],
                            CVE_Id_Web='{{CVE_Id_Web}}', Web_Module='{{Web_Module}}', Web_Transport='{{Web_Transport}}',
                            Web_Port='{{Web_Port}}', Web_Product='{{Web_Product}}',
                            CVE_Id_File='{{CVE_Id_File}}', File_Module='{{File_Module}}', File_Transport='{{File_Transport}}',
                            File_Port='{{File_Port}}')

    #Write to .P
    baiscFile.write(basic_top)
    baiscFile.close()

    print("Saved topology template in '{}'".format(output_name))


if __name__ == "__main__":
    deJsonTop()
